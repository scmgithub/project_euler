# coding=utf-8
# Problem 12

# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

#      1: 1
#      3: 1,3
#      6: 1,2,3,6
#     10: 1,2,5,10
#     15: 1,3,5,15
#     21: 1,3,7,21
#     28: 1,2,4,7,14,28

# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over five hundred divisors?

import math

targ_divisors = 500
triangle = 0
addend = 1
divisors = 0

while divisors <= targ_divisors:
  triangle += addend
  print "triangle: ",triangle," ",
  addend += 1

  divisors = 0
  # quicker, but not quite as accurate (ie. does not calculate right for 1 or 36 - perfect squares)
  for x in range(1,int(math.floor(math.sqrt(triangle))+1)):
    if triangle % x == 0:
      divisors += 1
  divisors *= 2

  # real slow
  #for x in range(1,triangle+1):
  #  if triangle % x == 0:
  #    divisors += 1
  print divisors,"divisors"

print triangle,"has",divisors,"(>",targ_divisors,") divisors."